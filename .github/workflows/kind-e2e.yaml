name: KinD e2e tests

on:
  pull_request:
    branches: [ 'main', 'release-*' ]

defaults:
  run:
    shell: bash
    working-directory: ./src/knative.dev/serving

jobs:

  e2e-tests:
    name: e2e tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Keep running if one leg fails.
      matrix:
        cluster:
        - v1.20.7/contour
        - v1.21.1/kourier
        - v1.22.2/istio
        - v1.22.2/gateway-api

        test-suite:
        - ./test/conformance/runtime
        - ./test/conformance/api/...
        - ./test/e2e

        include:
          # Map between K8s and KinD versions.
          # This is attempting to make it a bit clearer what's being tested.
          # See: https://github.com/kubernetes-sigs/kind/releases
        - cluster: v1.20.7/contour
          k8s-version: v1.20.7
          kind-version: v0.11.1
          kind-image-sha: sha256:cbeaf907fc78ac97ce7b625e4bf0de16e3ea725daf6b04f930bd14c67c671ff9
          kingress: contour
          cluster-suffix: c${{ github.run_id }}.local
        - cluster: v1.21.1/kourier
          k8s-version: v1.21.1
          kind-version: v0.11.1
          kind-image-sha: sha256:69860bda5563ac81e3c0057d654b5253219618a22ec3a346306239bba8cfa1a6
          kingress: kourier
          cluster-suffix: c${{ github.run_id }}.local
        - cluster: v1.22.2/istio
          k8s-version: v1.22.2
          kind-version: v0.11.1
          kind-image-sha: sha256:f638a08c1f68fe2a99e724ace6df233a546eaf6713019a0b310130a4f91ebe7f
          kingress: istio
          cluster-suffix: c${{ github.run_id }}.local
        - cluster: v1.22.2/gateway-api
          k8s-version: v1.22.2
          kind-version: v0.11.1
          kind-image-sha: sha256:f638a08c1f68fe2a99e724ace6df233a546eaf6713019a0b310130a4f91ebe7f
          kingress: gateway-api
          cluster-suffix: c${{ github.run_id }}.local

    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: on
      GOFLAGS: -tags=nostackdriver
      # https://github.com/google/go-containerregistry/pull/125 allows insecure registry for
      # '*.local' hostnames. This works both for `ko` and our own tag-to-digest resolution logic,
      # thus allowing us to test without bypassing tag-to-digest resolution.
      REGISTRY_NAME: registry.local
      REGISTRY_PORT: 5000
      KO_DOCKER_REPO: registry.local:5000/knative

    steps:
    - name: Set up Go 1.16.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.16.x

    - name: Install Dependencies
      working-directory: ./
      run: |
        echo '::group:: install ko'
        curl -L https://github.com/google/ko/releases/download/v0.6.0/ko_0.6.0_Linux_x86_64.tar.gz | tar xzf - ko
        chmod +x ./ko
        sudo mv ko /usr/local/bin
        echo '::endgroup::'

    - name: Check out code onto GOPATH
      uses: actions/checkout@v2
      with:
        path: ./src/knative.dev/serving

    - name: Install KinD
      run: |
        set -x

        # Disable swap otherwise memory enforcement doesn't work
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600009955324200
        sudo swapoff -a
        sudo rm -f /swapfile

        # Use in-memory storage to avoid etcd server timeouts.
        # https://kubernetes.slack.com/archives/CEKK1KTN2/p1615134111016300
        # https://github.com/kubernetes-sigs/kind/issues/845
        sudo mkdir -p /tmp/etcd
        sudo mount -t tmpfs tmpfs /tmp/etcd

        curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${{ matrix.kind-version }}/kind-$(uname)-amd64
        chmod +x ./kind
        sudo mv kind /usr/local/bin

    - name: Configure KinD Cluster
      working-directory: ./src/knative.dev/serving
      run: |
        set -x

        # KinD configuration.
        cat > kind.yaml <<EOF
        apiVersion: kind.x-k8s.io/v1alpha4
        kind: Cluster

        # Configure registry for KinD.
        containerdConfigPatches:
        - |-
          [plugins."io.containerd.grpc.v1.cri".registry.mirrors."$REGISTRY_NAME:$REGISTRY_PORT"]
            endpoint = ["http://$REGISTRY_NAME:$REGISTRY_PORT"]

        # This is needed in order to support projected volumes with service account tokens.
        # See: https://kubernetes.slack.com/archives/CEKK1KTN2/p1600268272383600
        kubeadmConfigPatches:
          - |
            apiVersion: kubeadm.k8s.io/v1beta2
            kind: ClusterConfiguration
            metadata:
              name: config
            apiServer:
              extraArgs:
                "service-account-issuer": "kubernetes.default.svc"
                "service-account-signing-key-file": "/etc/kubernetes/pki/sa.key"
            networking:
              dnsDomain: "${{ matrix.cluster-suffix }}"

        nodes:
        - role: control-plane
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
          extraMounts:
          - containerPath: /var/lib/etcd
            hostPath: /tmp/etcd
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        EOF

    - name: Add Workers to KinD Cluster (Istio, Gateway API)
      working-directory: ./src/knative.dev/serving
      if: matrix.kingress == 'istio' || matrix.kingress == 'gateway-api'
      run: |
        set -x

        cat >> kind.yaml <<EOF
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        - role: worker
          image: kindest/node:${{ matrix.k8s-version }}@${{ matrix.kind-image-sha }}
        EOF

    - name: Create KinD Cluster
      working-directory: ./src/knative.dev/serving
      run: |
        set -x

        kind create cluster --config kind.yaml

    - name: Setup local registry
      run: |
        # Run a registry.
        docker run -d --restart=always \
          -p $REGISTRY_PORT:$REGISTRY_PORT --name $REGISTRY_NAME registry:2

        # Connect the registry to the KinD network.
        docker network connect "kind" $REGISTRY_NAME

        # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to
        # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image
        sudo echo "127.0.0.1 $REGISTRY_NAME" | sudo tee -a /etc/hosts

    - name: Install Serving & Ingress
      working-directory: ./src/knative.dev/serving
      run: |
        source ./test/e2e-common.sh

        KIND=1
        INGRESS_CLASS="${{ matrix.kingress }}.ingress.networking.knative.dev"
        CLUSTER_DOMAIN="${{ matrix.cluster-suffix }}"

        knative_setup
        test_setup

        echo "INGRESS_CLASS=$INGRESS_CLASS" >> $GITHUB_ENV
        echo "CLUSTER_DOMAIN=$CLUSTER_DOMAIN" >> $GITHUB_ENV
        echo "SYSTEM_NAMESPACE=$SYSTEM_NAMESPACE" >> $GITHUB_ENV
        echo "GATEWAY_OVERRIDE=$GATEWAY_OVERRIDE" >> $GITHUB_ENV
        echo "GATEWAY_NAMESPACE_OVERRIDE=$GATEWAY_NAMESPACE_OVERRIDE" >> $GITHUB_ENV

    - name: Run Test
      working-directory: ./src/knative.dev/serving
      run: |
        set -x

        # Exclude the control-plane node, which doesn't seem to expose the nodeport service.
        IPS=( $(kubectl get nodes -lkubernetes.io/hostname!=kind-control-plane -ojsonpath='{.items[*].status.addresses[?(@.type=="InternalIP")].address}') )
        # Run the tests tagged as e2e on the KinD cluster.
        go test -race -count=1 -parallel=1 -timeout=30m -tags=e2e ${{ matrix.test-suite }} \
          --ingressendpoint="${IPS[0]}" \
          --enable-alpha --enable-beta
