// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fnInvocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvocationClient is the client API for Invocation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvocationClient interface {
	RouteInvocation(ctx context.Context, in *InvocationRequest, opts ...grpc.CallOption) (*Empty, error)
}

type invocationClient struct {
	cc grpc.ClientConnInterface
}

func NewInvocationClient(cc grpc.ClientConnInterface) InvocationClient {
	return &invocationClient{cc}
}

func (c *invocationClient) RouteInvocation(ctx context.Context, in *InvocationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/fnInvocation.Invocation/RouteInvocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvocationServer is the server API for Invocation service.
// All implementations must embed UnimplementedInvocationServer
// for forward compatibility
type InvocationServer interface {
	RouteInvocation(context.Context, *InvocationRequest) (*Empty, error)
	mustEmbedUnimplementedInvocationServer()
}

// UnimplementedInvocationServer must be embedded to have forward compatible implementations.
type UnimplementedInvocationServer struct {
}

func (UnimplementedInvocationServer) RouteInvocation(context.Context, *InvocationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RouteInvocation not implemented")
}
func (UnimplementedInvocationServer) mustEmbedUnimplementedInvocationServer() {}

// UnsafeInvocationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvocationServer will
// result in compilation errors.
type UnsafeInvocationServer interface {
	mustEmbedUnimplementedInvocationServer()
}

func RegisterInvocationServer(s grpc.ServiceRegistrar, srv InvocationServer) {
	s.RegisterService(&Invocation_ServiceDesc, srv)
}

func _Invocation_RouteInvocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvocationServer).RouteInvocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fnInvocation.Invocation/RouteInvocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvocationServer).RouteInvocation(ctx, req.(*InvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Invocation_ServiceDesc is the grpc.ServiceDesc for Invocation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Invocation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fnInvocation.Invocation",
	HandlerType: (*InvocationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RouteInvocation",
			Handler:    _Invocation_RouteInvocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fnInvocation.proto",
}
