// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upXDT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamDataClient is the client API for StreamData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamDataClient interface {
	SendData(ctx context.Context, opts ...grpc.CallOption) (StreamData_SendDataClient, error)
}

type streamDataClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamDataClient(cc grpc.ClientConnInterface) StreamDataClient {
	return &streamDataClient{cc}
}

func (c *streamDataClient) SendData(ctx context.Context, opts ...grpc.CallOption) (StreamData_SendDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamData_ServiceDesc.Streams[0], "/upXDT.StreamData/SendData", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamDataSendDataClient{stream}
	return x, nil
}

type StreamData_SendDataClient interface {
	Send(*Request) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type streamDataSendDataClient struct {
	grpc.ClientStream
}

func (x *streamDataSendDataClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamDataSendDataClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamDataServer is the server API for StreamData service.
// All implementations must embed UnimplementedStreamDataServer
// for forward compatibility
type StreamDataServer interface {
	SendData(StreamData_SendDataServer) error
	mustEmbedUnimplementedStreamDataServer()
}

// UnimplementedStreamDataServer must be embedded to have forward compatible implementations.
type UnimplementedStreamDataServer struct {
}

func (UnimplementedStreamDataServer) SendData(StreamData_SendDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedStreamDataServer) mustEmbedUnimplementedStreamDataServer() {}

// UnsafeStreamDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamDataServer will
// result in compilation errors.
type UnsafeStreamDataServer interface {
	mustEmbedUnimplementedStreamDataServer()
}

func RegisterStreamDataServer(s grpc.ServiceRegistrar, srv StreamDataServer) {
	s.RegisterService(&StreamData_ServiceDesc, srv)
}

func _StreamData_SendData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamDataServer).SendData(&streamDataSendDataServer{stream})
}

type StreamData_SendDataServer interface {
	SendAndClose(*Empty) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type streamDataSendDataServer struct {
	grpc.ServerStream
}

func (x *streamDataSendDataServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamDataSendDataServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamData_ServiceDesc is the grpc.ServiceDesc for StreamData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upXDT.StreamData",
	HandlerType: (*StreamDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendData",
			Handler:       _StreamData_SendData_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "upXDT.proto",
}
