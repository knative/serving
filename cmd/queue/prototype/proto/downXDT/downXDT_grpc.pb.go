// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package downXDT

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// XDTtoFnClient is the client API for XDTtoFn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type XDTtoFnClient interface {
	XDTFnCall(ctx context.Context, in *InvocationRequest, opts ...grpc.CallOption) (*Empty, error)
	XDTDataServe(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (XDTtoFn_XDTDataServeClient, error)
}

type xDTtoFnClient struct {
	cc grpc.ClientConnInterface
}

func NewXDTtoFnClient(cc grpc.ClientConnInterface) XDTtoFnClient {
	return &xDTtoFnClient{cc}
}

func (c *xDTtoFnClient) XDTFnCall(ctx context.Context, in *InvocationRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/downXDT.XDTtoFn/XDTFnCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *xDTtoFnClient) XDTDataServe(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (XDTtoFn_XDTDataServeClient, error) {
	stream, err := c.cc.NewStream(ctx, &XDTtoFn_ServiceDesc.Streams[0], "/downXDT.XDTtoFn/XDTDataServe", opts...)
	if err != nil {
		return nil, err
	}
	x := &xDTtoFnXDTDataServeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type XDTtoFn_XDTDataServeClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type xDTtoFnXDTDataServeClient struct {
	grpc.ClientStream
}

func (x *xDTtoFnXDTDataServeClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// XDTtoFnServer is the server API for XDTtoFn service.
// All implementations must embed UnimplementedXDTtoFnServer
// for forward compatibility
type XDTtoFnServer interface {
	XDTFnCall(context.Context, *InvocationRequest) (*Empty, error)
	XDTDataServe(*DataRequest, XDTtoFn_XDTDataServeServer) error
	mustEmbedUnimplementedXDTtoFnServer()
}

// UnimplementedXDTtoFnServer must be embedded to have forward compatible implementations.
type UnimplementedXDTtoFnServer struct {
}

func (UnimplementedXDTtoFnServer) XDTFnCall(context.Context, *InvocationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method XDTFnCall not implemented")
}
func (UnimplementedXDTtoFnServer) XDTDataServe(*DataRequest, XDTtoFn_XDTDataServeServer) error {
	return status.Errorf(codes.Unimplemented, "method XDTDataServe not implemented")
}
func (UnimplementedXDTtoFnServer) mustEmbedUnimplementedXDTtoFnServer() {}

// UnsafeXDTtoFnServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to XDTtoFnServer will
// result in compilation errors.
type UnsafeXDTtoFnServer interface {
	mustEmbedUnimplementedXDTtoFnServer()
}

func RegisterXDTtoFnServer(s grpc.ServiceRegistrar, srv XDTtoFnServer) {
	s.RegisterService(&XDTtoFn_ServiceDesc, srv)
}

func _XDTtoFn_XDTFnCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XDTtoFnServer).XDTFnCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/downXDT.XDTtoFn/XDTFnCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XDTtoFnServer).XDTFnCall(ctx, req.(*InvocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _XDTtoFn_XDTDataServe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(XDTtoFnServer).XDTDataServe(m, &xDTtoFnXDTDataServeServer{stream})
}

type XDTtoFn_XDTDataServeServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type xDTtoFnXDTDataServeServer struct {
	grpc.ServerStream
}

func (x *xDTtoFnXDTDataServeServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

// XDTtoFn_ServiceDesc is the grpc.ServiceDesc for XDTtoFn service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var XDTtoFn_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "downXDT.XDTtoFn",
	HandlerType: (*XDTtoFnServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "XDTFnCall",
			Handler:    _XDTtoFn_XDTFnCall_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "XDTDataServe",
			Handler:       _XDTtoFn_XDTDataServe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "downXDT.proto",
}
