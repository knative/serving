# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: activator
  namespace: knative-serving
  labels:
    serving.knative.dev/release: devel
spec:
  selector:
    matchLabels:
      app: activator
      role: activator
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "false"
        sidecar.istio.io/inject: "true"
      labels:
        app: activator
        role: activator
        serving.knative.dev/release: devel
    spec:
      serviceAccountName: controller
      # We want to give Activator quite some to exit, to process the existing requests
      # which might be quite long running, i.e. streaming.
      terminationGracePeriodSeconds: 300
      containers:
      - name: activator
        # This is the Go import path for the binary that is containerized
        # and substituted here.
        image: knative.dev/serving/cmd/activator
        env:
          # Run Activator with GC collection when newly generated memory is 500%
          - name: GOGC
            value: 500
        ports:
        - name: http1
          containerPort: 8012
        - name: h2c
          containerPort: 8013
        - name: metrics
          containerPort: 9090
        - name: profiling
          containerPort: 8008
        readinessProbe:
          httpGet:
            # The path does not matter, we look for the kubelet user-agent
            # (or our header below)
            path: /healthz
            port: 8012
            httpHeaders:
            # Istio with mTLS strips the Kubelet user-agent, so pass a header too.
            - name: k-kubelet-probe
              value: "activator"
        livenessProbe:
          httpGet:
            # The path does not matter, we look for kubelet probe headers.
            path: /healthz
            port: 8012
            httpHeaders:
            # Istio with mTLS strips the Kubelet user-agent, so pass a header too.
            - name: k-kubelet-probe
              value: "activator"
        resources:
          # The numbers are based on performance test results from
          # https://github.com/knative/serving/issues/1625#issuecomment-511930023
          requests:
            cpu: 300m
            memory: 60Mi
          limits:
            cpu: 1000m
            memory: 600Mi
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SYSTEM_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: CONFIG_LOGGING_NAME
            value: config-logging
          - name: CONFIG_OBSERVABILITY_NAME
            value: config-observability
          # Used for Stackdriver only.
          - name: METRICS_DOMAIN
            value: knative.dev/internal/serving
        securityContext:
          allowPrivilegeEscalation: false
---
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
    name: activator
    namespace: knative-serving
spec:
    minReplicas: 1
    maxReplicas: 20
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: activator
    metrics:
    - type: Resource
      resource:
        name: cpu
        # Percentage of the requested CPU
        targetAverageUtilization: 100
