# Copyright 2018 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: config-observability
  namespace: knative-serving
  labels:
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/component: observability
    app.kubernetes.io/version: devel
  annotations:
    knative.dev/example-checksum: "f183bbc6"
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # This block is not actually functional configuration,
    # but serves to illustrate the available configuration
    # options and document them in a way that is accessible
    # to users that `kubectl edit` this config map.
    #
    # These sample configuration options may be copied out of
    # this example block and unindented to be in the data block
    # to actually change the configuration.

    # logging.enable-var-log-collection defaults to false.
    # The fluentd daemon set will be set up to collect /var/log if
    # this flag is true.
    logging.enable-var-log-collection: "false"

    # logging.revision-url-template provides a template to use for producing the
    # logging URL that is injected into the status of each Revision.
    logging.revision-url-template: "http://logging.example.com/?revisionUID=${REVISION_UID}"

    # If non-empty, this enables queue proxy writing user request logs to stdout, excluding probe
    # requests.
    # NB: after 0.18 release logging.enable-request-log must be explicitly set to true
    # in order for request logging to be enabled.
    #
    # The value determines the shape of the request logs and it must be a valid go text/template.
    # It is important to keep this as a single line. Multiple lines are parsed as separate entities
    # by most collection agents and will split the request logs into multiple records.
    #
    # The following fields and functions are available to the template:
    #
    # Request: An http.Request (see https://golang.org/pkg/net/http/#Request)
    # representing an HTTP request received by the server.
    #
    # Response:
    # struct {
    #   Code    int       // HTTP status code (see https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml)
    #   Size    int       // An int representing the size of the response.
    #   Latency float64   // A float64 representing the latency of the response in seconds.
    # }
    #
    # Revision:
    # struct {
    #   Name          string  // Knative revision name
    #   Namespace     string  // Knative revision namespace
    #   Service       string  // Knative service name
    #   Configuration string  // Knative configuration name
    #   PodName       string  // Name of the pod hosting the revision
    #   PodIP         string  // IP of the pod hosting the revision
    # }
    #
    logging.request-log-template: '{"httpRequest": {"requestMethod": "{{.Request.Method}}", "requestUrl": "{{js .Request.RequestURI}}", "requestSize": "{{.Request.ContentLength}}", "status": {{.Response.Code}}, "responseSize": "{{.Response.Size}}", "userAgent": "{{js .Request.UserAgent}}", "remoteIp": "{{js .Request.RemoteAddr}}", "serverIp": "{{.Revision.PodIP}}", "referer": "{{js .Request.Referer}}", "latency": "{{.Response.Latency}}s", "protocol": "{{.Request.Proto}}"}, "traceId": "{{index .Request.Header "X-B3-Traceid"}}"}'

    # If true, the request logging will be enabled.
    logging.enable-request-log: "false"

    # If true, this enables queue proxy writing request logs for probe requests to stdout.
    # It uses the same template for user requests, i.e. logging.request-log-template.
    logging.enable-probe-request-log: "false"

    # metrics-protocol field specifies the protocol used when exporting metrics
    # It supports either 'none' (the default), 'prometheus', 'http/protobuf' (OTLP HTTP), 'grpc' (OTLP gRPC)
    metrics-protocol: http/protobuf

    # metrics-endpoint field specifies the destination metrics should be exporter to.
    #
    # The endpoint MUST be set when the protocol is http/protobuf or grpc.
    # The endpoint MUST NOT be set when the protocol is none.
    #
    # When the protocol is prometheus the endpoint can accept a 'host:port' string to customize the
    # listening host interface and port.
    metrics-endpoint: http://example.com/v1/traces

    # metrics-export-interval specifies the global metrics reporting period for control and data plane components.
    # If a zero or negative value is passed the default reporting OTel period is used (60 secs).
    metrics-export-interval: 60s

    # request-metrics-protocol field specifies the protocol used when exporting queue-proxy metrics
    # It supports either 'none' (the default), 'prometheus', 'http/protobuf' (OTLP HTTP), 'grpc' (OTLP gRPC)
    request-metrics-protocol: http/protobuf

    # request-metrics-endpoint field specifies the destination metrics from the queue proxy should be exporter to.
    #
    # The endpoint MUST be set when the protocol is http/protobuf or grpc.
    # The endpoint MUST NOT be set when the protocol is none.
    #
    # When the protocol is prometheus the endpoint can accept a 'host:port' string to customize the
    # listening host interface and port.
    request-metrics-endpoint: http://promstack-kube-prometheus-prometheus.observability:9090/api/v1/otlp/v1/metrics

    # request-metrics-export-interval specifies the global metrics reporting period for the queue-proxy.
    #
    # If a zero or negative value is passed the default reporting OTel period is used (60 secs).
    request-metrics-export-interval: 60s

    # runtime-profiling indicates whether it is allowed to retrieve runtime profiling data from
    # the pods via an HTTP server in the format expected by the pprof visualization tool. When
    # enabled, the Knative Serving pods expose the profiling data on an alternate HTTP port 8008.
    # The HTTP context root for profiling is then /debug/pprof/.
    runtime-profiling: enabled

    # tracing-protocol field specifies the protocol used when exporting traces
    # It supports either 'none' (the default), 'http/protobuf' (OTLP HTTP), 'grpc' (OTLP gRPC)
    # or `stdout` for debugging purposes
    tracing-protocol: http/protobuf

    # tracing-endpoint field specifies the destination traces should be exporter to.
    #
    # The endpoint MUST be set when the protocol is http/protobuf or grpc.
    # The endpoint MUST NOT be set when the protocol is none.
    tracing-endpoint: http://jaeger-collector.observability:4318/v1/traces

    # tracing-sampling-rate allows the user to specify what percentage of all traces should be exported
    # The value should be between 0 (never sample) to 1 (always sample)
    tracing-sampling-rate: "1"
