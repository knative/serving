// Code generated by protoc-gen-go. DO NOT EDIT.
// source: clients/proto/analyzers/threshold_analyzer.proto

package mako_analyzers_threshold_analyzer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	mako_go_proto "github.com/google/mako/spec/proto/mako_go_proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ThresholdConfig struct {
	Min                  *float64                  `protobuf:"fixed64,1,opt,name=min" json:"min,omitempty"`
	Max                  *float64                  `protobuf:"fixed64,2,opt,name=max" json:"max,omitempty"`
	OutlierPercentMax    *float64                  `protobuf:"fixed64,3,opt,name=outlier_percent_max,json=outlierPercentMax" json:"outlier_percent_max,omitempty"`
	DataFilter           *mako_go_proto.DataFilter `protobuf:"bytes,4,opt,name=data_filter,json=dataFilter" json:"data_filter,omitempty"`
	ConfigName           *string                   `protobuf:"bytes,5,opt,name=config_name,json=configName" json:"config_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ThresholdConfig) Reset()         { *m = ThresholdConfig{} }
func (m *ThresholdConfig) String() string { return proto.CompactTextString(m) }
func (*ThresholdConfig) ProtoMessage()    {}
func (*ThresholdConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc166777e6a25c0, []int{0}
}

func (m *ThresholdConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdConfig.Unmarshal(m, b)
}
func (m *ThresholdConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdConfig.Marshal(b, m, deterministic)
}
func (m *ThresholdConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdConfig.Merge(m, src)
}
func (m *ThresholdConfig) XXX_Size() int {
	return xxx_messageInfo_ThresholdConfig.Size(m)
}
func (m *ThresholdConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdConfig proto.InternalMessageInfo

func (m *ThresholdConfig) GetMin() float64 {
	if m != nil && m.Min != nil {
		return *m.Min
	}
	return 0
}

func (m *ThresholdConfig) GetMax() float64 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ThresholdConfig) GetOutlierPercentMax() float64 {
	if m != nil && m.OutlierPercentMax != nil {
		return *m.OutlierPercentMax
	}
	return 0
}

func (m *ThresholdConfig) GetDataFilter() *mako_go_proto.DataFilter {
	if m != nil {
		return m.DataFilter
	}
	return nil
}

func (m *ThresholdConfig) GetConfigName() string {
	if m != nil && m.ConfigName != nil {
		return *m.ConfigName
	}
	return ""
}

type CrossRunConfig struct {
	RunInfoQueryList     []*mako_go_proto.RunInfoQuery `protobuf:"bytes,1,rep,name=run_info_query_list,json=runInfoQueryList" json:"run_info_query_list,omitempty"`
	MinRunCount          *int32                        `protobuf:"varint,3,opt,name=min_run_count,json=minRunCount" json:"min_run_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CrossRunConfig) Reset()         { *m = CrossRunConfig{} }
func (m *CrossRunConfig) String() string { return proto.CompactTextString(m) }
func (*CrossRunConfig) ProtoMessage()    {}
func (*CrossRunConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc166777e6a25c0, []int{1}
}

func (m *CrossRunConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrossRunConfig.Unmarshal(m, b)
}
func (m *CrossRunConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrossRunConfig.Marshal(b, m, deterministic)
}
func (m *CrossRunConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossRunConfig.Merge(m, src)
}
func (m *CrossRunConfig) XXX_Size() int {
	return xxx_messageInfo_CrossRunConfig.Size(m)
}
func (m *CrossRunConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossRunConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CrossRunConfig proto.InternalMessageInfo

func (m *CrossRunConfig) GetRunInfoQueryList() []*mako_go_proto.RunInfoQuery {
	if m != nil {
		return m.RunInfoQueryList
	}
	return nil
}

func (m *CrossRunConfig) GetMinRunCount() int32 {
	if m != nil && m.MinRunCount != nil {
		return *m.MinRunCount
	}
	return 0
}

type ThresholdAnalyzerInput struct {
	Configs               []*ThresholdConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
	Name                  *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	HistoricalContextTags []string           `protobuf:"bytes,3,rep,name=historical_context_tags,json=historicalContextTags" json:"historical_context_tags,omitempty"`
	CrossRunConfig        *CrossRunConfig    `protobuf:"bytes,4,opt,name=cross_run_config,json=crossRunConfig" json:"cross_run_config,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}           `json:"-"`
	XXX_unrecognized      []byte             `json:"-"`
	XXX_sizecache         int32              `json:"-"`
}

func (m *ThresholdAnalyzerInput) Reset()         { *m = ThresholdAnalyzerInput{} }
func (m *ThresholdAnalyzerInput) String() string { return proto.CompactTextString(m) }
func (*ThresholdAnalyzerInput) ProtoMessage()    {}
func (*ThresholdAnalyzerInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc166777e6a25c0, []int{2}
}

func (m *ThresholdAnalyzerInput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdAnalyzerInput.Unmarshal(m, b)
}
func (m *ThresholdAnalyzerInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdAnalyzerInput.Marshal(b, m, deterministic)
}
func (m *ThresholdAnalyzerInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdAnalyzerInput.Merge(m, src)
}
func (m *ThresholdAnalyzerInput) XXX_Size() int {
	return xxx_messageInfo_ThresholdAnalyzerInput.Size(m)
}
func (m *ThresholdAnalyzerInput) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdAnalyzerInput.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdAnalyzerInput proto.InternalMessageInfo

func (m *ThresholdAnalyzerInput) GetConfigs() []*ThresholdConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *ThresholdAnalyzerInput) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ThresholdAnalyzerInput) GetHistoricalContextTags() []string {
	if m != nil {
		return m.HistoricalContextTags
	}
	return nil
}

func (m *ThresholdAnalyzerInput) GetCrossRunConfig() *CrossRunConfig {
	if m != nil {
		return m.CrossRunConfig
	}
	return nil
}

type ThresholdAnalyzerOutput struct {
	ConfigResults        []*ThresholdConfigResult `protobuf:"bytes,1,rep,name=config_results,json=configResults" json:"config_results,omitempty"`
	MinTimestampMs       *float64                 `protobuf:"fixed64,2,opt,name=min_timestamp_ms,json=minTimestampMs" json:"min_timestamp_ms,omitempty"`
	MaxTimestampMs       *float64                 `protobuf:"fixed64,3,opt,name=max_timestamp_ms,json=maxTimestampMs" json:"max_timestamp_ms,omitempty"`
	MinBuildId           *float64                 `protobuf:"fixed64,4,opt,name=min_build_id,json=minBuildId" json:"min_build_id,omitempty"`
	MaxBuildId           *float64                 `protobuf:"fixed64,5,opt,name=max_build_id,json=maxBuildId" json:"max_build_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *ThresholdAnalyzerOutput) Reset()         { *m = ThresholdAnalyzerOutput{} }
func (m *ThresholdAnalyzerOutput) String() string { return proto.CompactTextString(m) }
func (*ThresholdAnalyzerOutput) ProtoMessage()    {}
func (*ThresholdAnalyzerOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc166777e6a25c0, []int{3}
}

func (m *ThresholdAnalyzerOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdAnalyzerOutput.Unmarshal(m, b)
}
func (m *ThresholdAnalyzerOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdAnalyzerOutput.Marshal(b, m, deterministic)
}
func (m *ThresholdAnalyzerOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdAnalyzerOutput.Merge(m, src)
}
func (m *ThresholdAnalyzerOutput) XXX_Size() int {
	return xxx_messageInfo_ThresholdAnalyzerOutput.Size(m)
}
func (m *ThresholdAnalyzerOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdAnalyzerOutput.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdAnalyzerOutput proto.InternalMessageInfo

func (m *ThresholdAnalyzerOutput) GetConfigResults() []*ThresholdConfigResult {
	if m != nil {
		return m.ConfigResults
	}
	return nil
}

func (m *ThresholdAnalyzerOutput) GetMinTimestampMs() float64 {
	if m != nil && m.MinTimestampMs != nil {
		return *m.MinTimestampMs
	}
	return 0
}

func (m *ThresholdAnalyzerOutput) GetMaxTimestampMs() float64 {
	if m != nil && m.MaxTimestampMs != nil {
		return *m.MaxTimestampMs
	}
	return 0
}

func (m *ThresholdAnalyzerOutput) GetMinBuildId() float64 {
	if m != nil && m.MinBuildId != nil {
		return *m.MinBuildId
	}
	return 0
}

func (m *ThresholdAnalyzerOutput) GetMaxBuildId() float64 {
	if m != nil && m.MaxBuildId != nil {
		return *m.MaxBuildId
	}
	return 0
}

type ThresholdConfigResult struct {
	PercentAboveMax         *float64         `protobuf:"fixed64,1,opt,name=percent_above_max,json=percentAboveMax" json:"percent_above_max,omitempty"`
	PercentBelowMin         *float64         `protobuf:"fixed64,2,opt,name=percent_below_min,json=percentBelowMin" json:"percent_below_min,omitempty"`
	ValueOutsideThreshold   *float64         `protobuf:"fixed64,3,opt,name=value_outside_threshold,json=valueOutsideThreshold" json:"value_outside_threshold,omitempty"`
	MetricLabel             *string          `protobuf:"bytes,4,opt,name=metric_label,json=metricLabel" json:"metric_label,omitempty"`
	Config                  *ThresholdConfig `protobuf:"bytes,5,opt,name=config" json:"config,omitempty"`
	Regression              *bool            `protobuf:"varint,6,opt,name=regression" json:"regression,omitempty"`
	CrossRunConfigExercised *bool            `protobuf:"varint,7,opt,name=cross_run_config_exercised,json=crossRunConfigExercised,def=0" json:"cross_run_config_exercised,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}         `json:"-"`
	XXX_unrecognized        []byte           `json:"-"`
	XXX_sizecache           int32            `json:"-"`
}

func (m *ThresholdConfigResult) Reset()         { *m = ThresholdConfigResult{} }
func (m *ThresholdConfigResult) String() string { return proto.CompactTextString(m) }
func (*ThresholdConfigResult) ProtoMessage()    {}
func (*ThresholdConfigResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_efc166777e6a25c0, []int{4}
}

func (m *ThresholdConfigResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ThresholdConfigResult.Unmarshal(m, b)
}
func (m *ThresholdConfigResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ThresholdConfigResult.Marshal(b, m, deterministic)
}
func (m *ThresholdConfigResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ThresholdConfigResult.Merge(m, src)
}
func (m *ThresholdConfigResult) XXX_Size() int {
	return xxx_messageInfo_ThresholdConfigResult.Size(m)
}
func (m *ThresholdConfigResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ThresholdConfigResult.DiscardUnknown(m)
}

var xxx_messageInfo_ThresholdConfigResult proto.InternalMessageInfo

const Default_ThresholdConfigResult_CrossRunConfigExercised bool = false

func (m *ThresholdConfigResult) GetPercentAboveMax() float64 {
	if m != nil && m.PercentAboveMax != nil {
		return *m.PercentAboveMax
	}
	return 0
}

func (m *ThresholdConfigResult) GetPercentBelowMin() float64 {
	if m != nil && m.PercentBelowMin != nil {
		return *m.PercentBelowMin
	}
	return 0
}

func (m *ThresholdConfigResult) GetValueOutsideThreshold() float64 {
	if m != nil && m.ValueOutsideThreshold != nil {
		return *m.ValueOutsideThreshold
	}
	return 0
}

func (m *ThresholdConfigResult) GetMetricLabel() string {
	if m != nil && m.MetricLabel != nil {
		return *m.MetricLabel
	}
	return ""
}

func (m *ThresholdConfigResult) GetConfig() *ThresholdConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ThresholdConfigResult) GetRegression() bool {
	if m != nil && m.Regression != nil {
		return *m.Regression
	}
	return false
}

func (m *ThresholdConfigResult) GetCrossRunConfigExercised() bool {
	if m != nil && m.CrossRunConfigExercised != nil {
		return *m.CrossRunConfigExercised
	}
	return Default_ThresholdConfigResult_CrossRunConfigExercised
}

func init() {
	proto.RegisterType((*ThresholdConfig)(nil), "mako.analyzers.threshold_analyzer.ThresholdConfig")
	proto.RegisterType((*CrossRunConfig)(nil), "mako.analyzers.threshold_analyzer.CrossRunConfig")
	proto.RegisterType((*ThresholdAnalyzerInput)(nil), "mako.analyzers.threshold_analyzer.ThresholdAnalyzerInput")
	proto.RegisterType((*ThresholdAnalyzerOutput)(nil), "mako.analyzers.threshold_analyzer.ThresholdAnalyzerOutput")
	proto.RegisterType((*ThresholdConfigResult)(nil), "mako.analyzers.threshold_analyzer.ThresholdConfigResult")
}

func init() {
	proto.RegisterFile("clients/proto/analyzers/threshold_analyzer.proto", fileDescriptor_efc166777e6a25c0)
}

var fileDescriptor_efc166777e6a25c0 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x4e, 0x1b, 0x31,
	0x10, 0xc6, 0xb5, 0x09, 0xe1, 0xcf, 0x04, 0x42, 0x30, 0x4a, 0x59, 0x71, 0x68, 0x43, 0x4e, 0x51,
	0x0f, 0x4b, 0xe1, 0x50, 0x55, 0xbd, 0x01, 0x6d, 0x25, 0x10, 0x94, 0xd6, 0xe2, 0xd6, 0x83, 0xe5,
	0xec, 0x3a, 0xc1, 0xaa, 0xd7, 0x4e, 0x6d, 0x2f, 0x5d, 0x2a, 0xf5, 0x19, 0x2a, 0xf5, 0x6d, 0xfa,
	0x6a, 0x3d, 0x55, 0xf6, 0x7a, 0x43, 0x02, 0x95, 0x5a, 0x71, 0xb3, 0xbf, 0xf9, 0x69, 0x3c, 0xfe,
	0x66, 0x06, 0x5e, 0xa4, 0x82, 0x33, 0x69, 0xcd, 0xfe, 0x54, 0x2b, 0xab, 0xf6, 0xa9, 0xa4, 0xe2,
	0xf6, 0x1b, 0xd3, 0x66, 0xdf, 0x5e, 0x6b, 0x66, 0xae, 0x95, 0xc8, 0x48, 0xad, 0x25, 0x1e, 0x41,
	0x7b, 0x39, 0xfd, 0xac, 0x92, 0x19, 0x98, 0x3c, 0x04, 0x77, 0x7b, 0x66, 0xca, 0xd2, 0x90, 0xd1,
	0xd3, 0xfe, 0x38, 0xf8, 0x15, 0xc1, 0xe6, 0x55, 0x4d, 0x9f, 0x28, 0x39, 0xe6, 0x13, 0xd4, 0x85,
	0x66, 0xce, 0x65, 0x1c, 0xf5, 0xa3, 0x61, 0x84, 0xdd, 0xd1, 0x2b, 0xb4, 0x8c, 0x1b, 0x41, 0xa1,
	0x25, 0x4a, 0x60, 0x5b, 0x15, 0x56, 0x70, 0xa6, 0xc9, 0x94, 0xe9, 0x94, 0x49, 0x4b, 0x1c, 0xd1,
	0xf4, 0xc4, 0x56, 0x08, 0x7d, 0xa8, 0x22, 0x17, 0xb4, 0x44, 0x07, 0xd0, 0xce, 0xa8, 0xa5, 0x64,
	0xcc, 0x85, 0x65, 0x3a, 0x5e, 0xea, 0x47, 0xc3, 0xf6, 0x61, 0x37, 0xf1, 0x95, 0xbc, 0xa1, 0x96,
	0xbe, 0xf3, 0x3a, 0x86, 0x6c, 0x76, 0x46, 0xcf, 0xa0, 0x9d, 0xfa, 0x82, 0x88, 0xa4, 0x39, 0x8b,
	0x5b, 0xfd, 0x68, 0xb8, 0x86, 0xa1, 0x92, 0xde, 0xd3, 0x9c, 0x0d, 0xbe, 0x43, 0xe7, 0x44, 0x2b,
	0x63, 0x70, 0x21, 0x43, 0xe5, 0x47, 0xb0, 0xad, 0x0b, 0x49, 0xb8, 0x1c, 0x2b, 0xf2, 0xa5, 0x60,
	0xfa, 0x96, 0x08, 0x6e, 0x6c, 0x1c, 0xf5, 0x9b, 0xc3, 0xf6, 0x21, 0xaa, 0x5e, 0xc3, 0x85, 0x3c,
	0x95, 0x63, 0xf5, 0xd1, 0x85, 0x71, 0x57, 0xcf, 0xdd, 0xce, 0xb9, 0xb1, 0x68, 0x00, 0x1b, 0x39,
	0x97, 0xc4, 0xa5, 0x49, 0x55, 0x21, 0xad, 0xff, 0x52, 0x0b, 0xb7, 0x73, 0x2e, 0xfd, 0x3b, 0x85,
	0xb4, 0x67, 0x4b, 0xab, 0x8d, 0x6e, 0x73, 0xf0, 0xa3, 0x01, 0x4f, 0x66, 0xd6, 0x1d, 0x05, 0x9f,
	0x4f, 0xe5, 0xb4, 0xb0, 0xe8, 0x1c, 0x56, 0xaa, 0x3a, 0x4d, 0x78, 0xfb, 0x30, 0xf9, 0x67, 0x87,
	0x92, 0x7b, 0x6d, 0xc0, 0x75, 0x0a, 0x84, 0x60, 0xc9, 0x3b, 0xd0, 0xf0, 0x0e, 0xf8, 0x33, 0x7a,
	0x09, 0x3b, 0xd7, 0xdc, 0x58, 0xa5, 0x79, 0x4a, 0x05, 0x49, 0x95, 0xb4, 0xac, 0xb4, 0xc4, 0xd2,
	0x89, 0x89, 0x9b, 0xfd, 0xe6, 0x70, 0x0d, 0xf7, 0xee, 0xc2, 0x27, 0x55, 0xf4, 0x8a, 0x4e, 0x0c,
	0xfa, 0x04, 0xdd, 0xd4, 0x79, 0x16, 0x3e, 0xe8, 0x1e, 0x08, 0xcd, 0x38, 0xf8, 0x8f, 0x12, 0x17,
	0xed, 0xc6, 0x9d, 0x74, 0xe1, 0x3e, 0xf8, 0xd9, 0x80, 0x9d, 0x07, 0x8e, 0x5c, 0x16, 0xd6, 0x59,
	0x42, 0xa0, 0x13, 0xba, 0xa9, 0x99, 0x29, 0x84, 0xad, 0x9d, 0x79, 0xf5, 0x08, 0x67, 0x7c, 0x02,
	0xbc, 0x91, 0xce, 0xdd, 0x0c, 0x1a, 0x42, 0xd7, 0x35, 0xce, 0xf2, 0x9c, 0x19, 0x4b, 0xf3, 0x29,
	0xc9, 0x4d, 0x18, 0xd8, 0x4e, 0xce, 0xe5, 0x55, 0x2d, 0x5f, 0x54, 0x24, 0x2d, 0x17, 0xc9, 0x66,
	0x20, 0x69, 0x39, 0x4f, 0xf6, 0x61, 0xdd, 0xe5, 0x1c, 0x15, 0x5c, 0x64, 0x84, 0x67, 0xde, 0xa9,
	0x08, 0x43, 0xce, 0xe5, 0xb1, 0x93, 0x4e, 0x33, 0x4f, 0xd0, 0xf2, 0x8e, 0x68, 0x05, 0x82, 0x96,
	0x81, 0x18, 0xfc, 0x6e, 0x40, 0xef, 0xaf, 0x1f, 0x40, 0xcf, 0x61, 0xab, 0xde, 0x1d, 0x3a, 0x52,
	0x37, 0xcc, 0x6f, 0x50, 0xb5, 0x75, 0x9b, 0x21, 0x70, 0xe4, 0x74, 0xb7, 0x3f, 0x73, 0xec, 0x88,
	0x09, 0xf5, 0x95, 0xb8, 0x0d, 0x6d, 0x2c, 0xb0, 0xc7, 0x4e, 0xbf, 0xe0, 0xd2, 0xcd, 0xc6, 0x0d,
	0x15, 0x05, 0x23, 0xaa, 0xb0, 0x86, 0x67, 0x8c, 0xcc, 0x2c, 0x0d, 0xdf, 0xec, 0xf9, 0xf0, 0x65,
	0x15, 0x9d, 0xd5, 0x86, 0xf6, 0x60, 0x3d, 0x67, 0x56, 0xf3, 0x94, 0x08, 0x3a, 0x62, 0xc2, 0xff,
	0x76, 0x0d, 0xb7, 0x2b, 0xed, 0xdc, 0x49, 0xe8, 0x0c, 0x96, 0xc3, 0xd0, 0xb4, 0xfc, 0xd0, 0x3c,
	0x66, 0xae, 0x43, 0x06, 0xf4, 0x14, 0x40, 0xb3, 0x89, 0x66, 0xc6, 0x70, 0x25, 0xe3, 0xe5, 0x7e,
	0x34, 0x5c, 0xc5, 0x73, 0x0a, 0x3a, 0x86, 0xdd, 0xfb, 0xa3, 0x4a, 0x58, 0xc9, 0x74, 0xca, 0x0d,
	0xcb, 0xe2, 0x15, 0xc7, 0xbf, 0x6e, 0x8d, 0xa9, 0x30, 0x0c, 0xef, 0x2c, 0x0e, 0xe2, 0xdb, 0x9a,
	0xfa, 0x13, 0x00, 0x00, 0xff, 0xff, 0xda, 0x96, 0x85, 0xd7, 0x4b, 0x05, 0x00, 0x00,
}
