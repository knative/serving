/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GenerationalLister helps list Generationals.
type GenerationalLister interface {
	// List lists all Generationals in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Generational, err error)
	// Generationals returns an object that can list and get Generationals.
	Generationals(namespace string) GenerationalNamespaceLister
	GenerationalListerExpansion
}

// generationalLister implements the GenerationalLister interface.
type generationalLister struct {
	indexer cache.Indexer
}

// NewGenerationalLister returns a new GenerationalLister.
func NewGenerationalLister(indexer cache.Indexer) GenerationalLister {
	return &generationalLister{indexer: indexer}
}

// List lists all Generationals in the indexer.
func (s *generationalLister) List(selector labels.Selector) (ret []*v1alpha1.Generational, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generational))
	})
	return ret, err
}

// Generationals returns an object that can list and get Generationals.
func (s *generationalLister) Generationals(namespace string) GenerationalNamespaceLister {
	return generationalNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenerationalNamespaceLister helps list and get Generationals.
type GenerationalNamespaceLister interface {
	// List lists all Generationals in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Generational, err error)
	// Get retrieves the Generational from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Generational, error)
	GenerationalNamespaceListerExpansion
}

// generationalNamespaceLister implements the GenerationalNamespaceLister
// interface.
type generationalNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Generationals in the indexer for a given namespace.
func (s generationalNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Generational, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Generational))
	})
	return ret, err
}

// Get retrieves the Generational from the indexer for a given namespace and name.
func (s generationalNamespaceLister) Get(name string) (*v1alpha1.Generational, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("generational"), name)
	}
	return obj.(*v1alpha1.Generational), nil
}
