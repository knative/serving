/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TargetLister helps list Targets.
type TargetLister interface {
	// List lists all Targets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Target, err error)
	// Targets returns an object that can list and get Targets.
	Targets(namespace string) TargetNamespaceLister
	TargetListerExpansion
}

// targetLister implements the TargetLister interface.
type targetLister struct {
	indexer cache.Indexer
}

// NewTargetLister returns a new TargetLister.
func NewTargetLister(indexer cache.Indexer) TargetLister {
	return &targetLister{indexer: indexer}
}

// List lists all Targets in the indexer.
func (s *targetLister) List(selector labels.Selector) (ret []*v1alpha1.Target, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Target))
	})
	return ret, err
}

// Targets returns an object that can list and get Targets.
func (s *targetLister) Targets(namespace string) TargetNamespaceLister {
	return targetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TargetNamespaceLister helps list and get Targets.
type TargetNamespaceLister interface {
	// List lists all Targets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Target, err error)
	// Get retrieves the Target from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Target, error)
	TargetNamespaceListerExpansion
}

// targetNamespaceLister implements the TargetNamespaceLister
// interface.
type targetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Targets in the indexer for a given namespace.
func (s targetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Target, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Target))
	})
	return ret, err
}

// Get retrieves the Target from the indexer for a given namespace and name.
func (s targetNamespaceLister) Get(name string) (*v1alpha1.Target, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("target"), name)
	}
	return obj.(*v1alpha1.Target), nil
}
