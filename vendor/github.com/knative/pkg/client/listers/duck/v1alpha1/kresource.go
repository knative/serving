/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/pkg/apis/duck/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KResourceLister helps list KResources.
type KResourceLister interface {
	// List lists all KResources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KResource, err error)
	// KResources returns an object that can list and get KResources.
	KResources(namespace string) KResourceNamespaceLister
	KResourceListerExpansion
}

// kResourceLister implements the KResourceLister interface.
type kResourceLister struct {
	indexer cache.Indexer
}

// NewKResourceLister returns a new KResourceLister.
func NewKResourceLister(indexer cache.Indexer) KResourceLister {
	return &kResourceLister{indexer: indexer}
}

// List lists all KResources in the indexer.
func (s *kResourceLister) List(selector labels.Selector) (ret []*v1alpha1.KResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KResource))
	})
	return ret, err
}

// KResources returns an object that can list and get KResources.
func (s *kResourceLister) KResources(namespace string) KResourceNamespaceLister {
	return kResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KResourceNamespaceLister helps list and get KResources.
type KResourceNamespaceLister interface {
	// List lists all KResources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KResource, err error)
	// Get retrieves the KResource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KResource, error)
	KResourceNamespaceListerExpansion
}

// kResourceNamespaceLister implements the KResourceNamespaceLister
// interface.
type kResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KResources in the indexer for a given namespace.
func (s kResourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KResource))
	})
	return ret, err
}

// Get retrieves the KResource from the indexer for a given namespace and name.
func (s kResourceNamespaceLister) Get(name string) (*v1alpha1.KResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kresource"), name)
	}
	return obj.(*v1alpha1.KResource), nil
}
