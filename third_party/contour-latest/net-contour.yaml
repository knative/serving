# Not used directly, this lets the knative-serving service account reconcile
# HTTPProxy resources.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: knative-serving-contour
  labels:
    networking.knative.dev/ingress-provider: contour
    app.kubernetes.io/component: net-contour
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: "20231207-019dcf2f"
    serving.knative.dev/controller: "true"
rules:
  - apiGroups: ["projectcontour.io"]
    resources: ["httpproxies"]
    verbs: ["get", "list", "create", "update", "delete", "deletecollection", "patch", "watch"]

# Copyright 2019 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-contour
  namespace: knative-serving
  labels:
    networking.knative.dev/ingress-provider: contour
    app.kubernetes.io/component: net-contour
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: "20231207-019dcf2f"
data:
  _example: |
    ################################
    #                              #
    #    EXAMPLE CONFIGURATION     #
    #                              #
    ################################

    # timeout-policy-idle sets TimeoutPolicy.Idle in contour HTTPProxy spec
    timeout-policy-idle: "infinity"

    # timeout-policy-response sets TimeoutPolicy.Response in contour HTTPProxy spec
    timeout-policy-response: "infinity"

    # If auto-TLS is disabled fallback to the following certificate
    #
    # An operator is required to setup a TLSCertificateDelegation
    # for this secret to be used
    default-tls-secret: "some-namespace/some-secret"

    # visibility contains the configuration for how to expose services
    # of assorted visibilities.  Each entry is keyed by the visibility
    # and contains two keys:
    #  1. the "class" value to pass to the Contour class annotations,
    #  2. the namespace/name of the Contour Envoy service.
    visibility: |
      ExternalIP:
        class: contour-external
        service: contour-external/envoy
      ClusterLocal:
        class: contour-internal
        service: contour-internal/envoy

# Copyright 2020 The Knative Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: net-contour-controller
  namespace: knative-serving
  labels:
    networking.knative.dev/ingress-provider: contour
    app.kubernetes.io/component: net-contour
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: "20231207-019dcf2f"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: net-contour-controller
  template:
    metadata:
      labels:
        app: net-contour-controller
        app.kubernetes.io/component: net-contour
        app.kubernetes.io/name: knative-serving
        app.kubernetes.io/version: "20231207-019dcf2f"
    spec:
      serviceAccountName: controller
      containers:
        - name: controller
          # This is the Go import path for the binary that is containerized
          # and substituted here.
          image: gcr.io/knative-nightly/knative.dev/net-contour/cmd/controller@sha256:05a870742b6067ec1902dec20d47b8b736eeacb7e3e824ffac511101f258a40c
          resources:
            requests:
              cpu: 40m
              memory: 40Mi
            limits:
              cpu: 400m
              memory: 400Mi
          env:
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIG_LOGGING_NAME
              value: config-logging
            - name: CONFIG_OBSERVABILITY_NAME
              value: config-observability
            - name: METRICS_DOMAIN
              value: knative.dev/net-contour
          ports:
            - name: metrics
              containerPort: 9090
            - name: profiling
              containerPort: 8008
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
---
#! Used when internal-encryption is set to "true"
apiVersion: projectcontour.io/v1
kind: TLSCertificateDelegation
metadata:
  name: knative-serving-certs
  namespace: knative-serving
  labels:
    networking.knative.dev/ingress-provider: contour
    app.kubernetes.io/component: net-contour
    app.kubernetes.io/name: knative-serving
    app.kubernetes.io/version: "20231207-019dcf2f"
spec:
  delegations:
    - secretName: knative-serving-certs
      targetNamespaces:
        - "*"
---

