# GENERATED FILE. Use with Kubernetes 1.7+
# TO UPDATE, modify files in install/kubernetes/templates/helm/istio and run install/updateVersion.sh
global:
  proxy:
    repository: docker.io/istio/proxy
    tag: 0.6.0
  proxyInit:
    repository: docker.io/istio/proxy_init
    tag: 0.6.0
  sidecarInjector:
    repository: docker.io/istio/sidecar_injector
    tag: 0.6.0
  mixer:
    repository: docker.io/istio/mixer
    tag: 0.6.0
  pilot:
    repository: docker.io/istio/pilot
    tag: 0.6.0
  security:
    repository: docker.io/istio/istio-ca
    tag: 0.6.0
  # Not recommended for user to configure this. Hyperkube image to use when creating custom resources
  hyperkube:
    repository: quay.io/coreos/hyperkube
    tag: v1.7.6_coreos.0
  # addons
  grafana:
    repository: docker.io/istio/grafana
    tag: 0.6.0
  servicegraph:
    repository: docker.io/istio/servicegraph
    tag: 0.6.0

  # create RBAC resources
  rbacEnabled: true
  # mutual TLS authentication
  securityEnabled: false

#
# ingress configuration
#
ingress:
  enabled: true
  serviceAccountName: default
  imagePullPolicy: IfNotPresent
  resources: {}
# limits:
#  cpu: 100m
#  memory: 128Mi
# requests:
#  cpu: 100m
#  memory: 128Mi
  nodeSelector: {}
# istio ingress configuration
  service:
  # By default istio ingress uses LoadBalancer type of service
  # to use NodePort, it needs to be enabled and desired port specified
    nodePort:
      enabled: false
      port: 32000

#
# sidecar-injector configuration
#
sidecar-injector:
  enabled: false
  serviceAccountName: default # used only if RBAC is not enabled
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}

  # istio egress capture whitelist
  # https://istio.io/docs/tasks/traffic-management/egress.html#calling-external-services-directly
  # example: includeIPRanges: "172.30.0.0/16,172.20.0.0/16"
  # would only capture egress traffic on those two IP Ranges, all other outbound traffic would
  # be allowed by the sidecar
  includeIPRanges: {}

#
# mixer configuration
#
mixer:
  enabled: true
  serviceAccountName: default # used only if RBAC is not enabled
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}

  prometheusStatsdExporter:
    repository: prom/statsd-exporter
    tag: latest
    imagePullPolicy: IfNotPresent
    resources: {}

#
# pilot configuration
#
pilot:
  enabled: true
  serviceAccountName: default # used only if RBAC is not enabled
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}

#
# security configuration
#
security:
  serviceAccountName: default # used only if RBAC is not enabled
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi
  nodeSelector: {}

#
# addons configuration
#
grafana:
  enabled: false
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  service:
    name: http
    type: ClusterIP
    externalPort: 3000
    internalPort: 3000
  ingress:
    enabled: false
    # Used to create an Ingress record.
    hosts:
      - grafana.local
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: grafana-tls
      #   hosts:
      #     - grafana.local
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  nodeSelector: {}

prometheus:
  enabled: false
  replicaCount: 1
  image:
    repository: docker.io/prom/prometheus
    tag: latest
    pullPolicy: IfNotPresent
  service:
    name: web
    type: ClusterIP
    externalPort: 9090
    internalPort: 9090
  ingress:
    enabled: false
    # Used to create an Ingress record.
    hosts:
      - prometheus.local
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: prometheus-tls
      #   hosts:
      #     - prometheus.local
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  nodeSelector: {}

servicegraph:
  enabled: false
  replicaCount: 1
  imagePullPolicy: IfNotPresent
  service:
    name: http
    type: ClusterIP
    externalPort: 8088
    internalPort: 8088
  ingress:
    enabled: false
    # Used to create an Ingress record.
    hosts:
      - servicegraph.local
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: servicegraph-tls
      #   hosts:
      #     - servicegraph.local
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  nodeSelector: {}
  # prometheus addres
  prometheusAddr: http://prometheus:9090

zipkin:
  enabled: false
  replicaCount: 1
  image:
    repository: docker.io/openzipkin/zipkin
    tag: latest
    pullPolicy: IfNotPresent
  service:
    name: http
    type: ClusterIP
    externalPort: 9411
    internalPort: 9411
  ingress:
    enabled: false
    # Used to create an Ingress record.
    hosts:
      - zipkin.local
    annotations:
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    tls:
      # Secrets must be manually created in the namespace.
      # - secretName: zipkin-tls
      #   hosts:
      #     - zipkin.local
  resources: {}
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi
  nodeSelector: {}
