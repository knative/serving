#!/bin/bash

RTPLUGS_PKG="" 
RTPLUGS_NAMES=""

# RTPLUGS_PKG should include a comma seperated list of go packages
# Each package should implement a plug of github.com/IBM/go-security-plugs/rtplugs
# All packages will be staticaly loaded to queue proxry 
#
# Package names that will be defined in the podSpec runtimePlugins and those 
# defined in the config-defaults configmap runtime-plugins parameter will be activated


# ----------- Do not edit above this line ------------------

# Comment out packages that you do not wish to load

# Add the testing workload security guard plug - harmless, yet better not use in production 
RTPLUGS_PKG="github.com/IBM/go-security-plugs/plugs/testgate"
RTPLUGS_NAMES="testgate"

# Add the sample workload security guard plug - do not use in production 
#RTPLUGS_PKG="${RTPLUGS_PKG},github.com/IBM/go-security-plugs/plugs/rtgate"

# Add workload security guard plug (under development) - use at your own risk
# RTPLUGS_PKG="${RTPLUGS_PKG},github.com/IBM/workload-security-guard/wsgate"

# Add here additinal packages that you wish to load in this template    
# RTPLUGS_PKG="${RTPLUGS_PKG}github.com/HomerSimpson/BestSecurityEver/shutdown"


# ----------- Do not edit below this line ------------------

cd cmd/queue
echo "------------------------"
echo "Generating queue.go"
mv -n queue.go queue.go.orig

cat <<EOT > queue.go
// Code generated by $0. DO NOT EDIT.

package main

import "os"

import "github.com/IBM/go-security-plugs/qpsecurity"

EOT

IFS="," read -r -a PKG_ARRAY <<< ${RTPLUGS_PKG}
for p in ${PKG_ARRAY}
do
  # process
  echo import _ \"$p\"
  echo "import _ \"$p\"" >> queue.go
  go get $p
done

cat <<EOT >> queue.go

func main() {
  os.Setenv("RTPLUGS", "${RTPLUGS_NAMES}")
  MainWithPlugs(&qpsecurity.SecurityExtensions)
}

EOT


cd ../..
go mod tidy 
go mod vendor
