From 82de2edabc5c4782573ebb0e74a08d2d3348bf7c Mon Sep 17 00:00:00 2001
From: Weston Haught <whaught@google.com>
Date: Thu, 20 Feb 2020 15:05:20 -0800
Subject: [PATCH] Include the modified generated code

---
 .../kubernetes/typed/core/v1/fake/fake_pod.go     | 13 +++++++++++++
 .../client-go/kubernetes/typed/core/v1/pod.go     | 15 +++++++++++++++
 2 files changed, 28 insertions(+)

diff --git a/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_pod.go b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_pod.go
index ebd473ac7..39a03b0d5 100644
--- a/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_pod.go
+++ b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_pod.go
@@ -19,6 +19,8 @@ limitations under the License.
 package fake

 import (
+	"context"
+
 	corev1 "k8s.io/api/core/v1"
 	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
 	labels "k8s.io/apimachinery/pkg/labels"
@@ -89,6 +91,17 @@ func (c *FakePods) Create(pod *corev1.Pod) (result *corev1.Pod, err error) {
 	return obj.(*corev1.Pod), err
 }

+// Create takes the representation of a pod and creates it.  Returns the server's representation of the pod, and an error, if there is any.
+func (c *FakePods) CreateWithOptions(ctx context.Context, pod *corev1.Pod, opts v1.CreateOptions) (result *corev1.Pod, err error) {
+	obj, err := c.Fake.
+		Invokes(testing.NewCreateAction(podsResource, c.ns, pod), &corev1.Pod{})
+
+	if obj == nil {
+		return nil, err
+	}
+	return obj.(*corev1.Pod), err
+}
+
 // Update takes the representation of a pod and updates it. Returns the server's representation of the pod, and an error, if there is any.
 func (c *FakePods) Update(pod *corev1.Pod) (result *corev1.Pod, err error) {
 	obj, err := c.Fake.
diff --git a/vendor/k8s.io/client-go/kubernetes/typed/core/v1/pod.go b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/pod.go
index feacd307f..6dee8fea8 100644
--- a/vendor/k8s.io/client-go/kubernetes/typed/core/v1/pod.go
+++ b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/pod.go
@@ -19,6 +19,7 @@ limitations under the License.
 package v1

 import (
+	"context"
 	"time"

 	v1 "k8s.io/api/core/v1"
@@ -38,6 +39,7 @@ type PodsGetter interface {
 // PodInterface has methods to work with Pod resources.
 type PodInterface interface {
 	Create(*v1.Pod) (*v1.Pod, error)
+	CreateWithOptions(ctx context.Context, pod *v1.Pod, opts metav1.CreateOptions) (*v1.Pod, error)
 	Update(*v1.Pod) (*v1.Pod, error)
 	UpdateStatus(*v1.Pod) (*v1.Pod, error)
 	Delete(name string, options *metav1.DeleteOptions) error
@@ -123,6 +125,19 @@ func (c *pods) Create(pod *v1.Pod) (result *v1.Pod, err error) {
 	return
 }

+// Create takes the representation of a pod and creates it.  Returns the server's representation of the pod, and an error, if there is any.
+func (c *pods) CreateWithOptions(ctx context.Context, pod *v1.Pod, opts metav1.CreateOptions) (result *v1.Pod, err error) {
+	result = &v1.Pod{}
+	err = c.client.Post().
+		Namespace(c.ns).
+		Resource("pods").
+		VersionedParams(&opts, scheme.ParameterCodec).
+		Body(pod).
+		Do().
+		Into(result)
+	return
+}
+
 // Update takes the representation of a pod and updates it. Returns the server's representation of the pod, and an error, if there is any.
 func (c *pods) Update(pod *v1.Pod) (result *v1.Pod, err error) {
 	result = &v1.Pod{}
--
2.25.0.265.gbab2e86ba0-goog

