/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/serving/pkg/apis/serving/v1"
)

// ServiceOrchestratorLister helps list ServiceOrchestrators.
// All objects returned here must be treated as read-only.
type ServiceOrchestratorLister interface {
	// List lists all ServiceOrchestrators in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceOrchestrator, err error)
	// ServiceOrchestrators returns an object that can list and get ServiceOrchestrators.
	ServiceOrchestrators(namespace string) ServiceOrchestratorNamespaceLister
	ServiceOrchestratorListerExpansion
}

// serviceOrchestratorLister implements the ServiceOrchestratorLister interface.
type serviceOrchestratorLister struct {
	indexer cache.Indexer
}

// NewServiceOrchestratorLister returns a new ServiceOrchestratorLister.
func NewServiceOrchestratorLister(indexer cache.Indexer) ServiceOrchestratorLister {
	return &serviceOrchestratorLister{indexer: indexer}
}

// List lists all ServiceOrchestrators in the indexer.
func (s *serviceOrchestratorLister) List(selector labels.Selector) (ret []*v1.ServiceOrchestrator, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceOrchestrator))
	})
	return ret, err
}

// ServiceOrchestrators returns an object that can list and get ServiceOrchestrators.
func (s *serviceOrchestratorLister) ServiceOrchestrators(namespace string) ServiceOrchestratorNamespaceLister {
	return serviceOrchestratorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ServiceOrchestratorNamespaceLister helps list and get ServiceOrchestrators.
// All objects returned here must be treated as read-only.
type ServiceOrchestratorNamespaceLister interface {
	// List lists all ServiceOrchestrators in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ServiceOrchestrator, err error)
	// Get retrieves the ServiceOrchestrator from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ServiceOrchestrator, error)
	ServiceOrchestratorNamespaceListerExpansion
}

// serviceOrchestratorNamespaceLister implements the ServiceOrchestratorNamespaceLister
// interface.
type serviceOrchestratorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ServiceOrchestrators in the indexer for a given namespace.
func (s serviceOrchestratorNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceOrchestrator, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceOrchestrator))
	})
	return ret, err
}

// Get retrieves the ServiceOrchestrator from the indexer for a given namespace and name.
func (s serviceOrchestratorNamespaceLister) Get(name string) (*v1.ServiceOrchestrator, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("serviceorchestrator"), name)
	}
	return obj.(*v1.ServiceOrchestrator), nil
}
