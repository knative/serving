/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/serving/pkg/apis/serving/v1"
)

// ConfigurationLister helps list Configurations.
// All objects returned here must be treated as read-only.
type ConfigurationLister interface {
	// List lists all Configurations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Configuration, err error)
	// Configurations returns an object that can list and get Configurations.
	Configurations(namespace string) ConfigurationNamespaceLister
	ConfigurationListerExpansion
}

// configurationLister implements the ConfigurationLister interface.
type configurationLister struct {
	listers.ResourceIndexer[*v1.Configuration]
}

// NewConfigurationLister returns a new ConfigurationLister.
func NewConfigurationLister(indexer cache.Indexer) ConfigurationLister {
	return &configurationLister{listers.New[*v1.Configuration](indexer, v1.Resource("configuration"))}
}

// Configurations returns an object that can list and get Configurations.
func (s *configurationLister) Configurations(namespace string) ConfigurationNamespaceLister {
	return configurationNamespaceLister{listers.NewNamespaced[*v1.Configuration](s.ResourceIndexer, namespace)}
}

// ConfigurationNamespaceLister helps list and get Configurations.
// All objects returned here must be treated as read-only.
type ConfigurationNamespaceLister interface {
	// List lists all Configurations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Configuration, err error)
	// Get retrieves the Configuration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Configuration, error)
	ConfigurationNamespaceListerExpansion
}

// configurationNamespaceLister implements the ConfigurationNamespaceLister
// interface.
type configurationNamespaceLister struct {
	listers.ResourceIndexer[*v1.Configuration]
}
