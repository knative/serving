/*
Copyright 2022 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/listers"
	"k8s.io/client-go/tools/cache"
	v1 "knative.dev/serving/pkg/apis/serving/v1"
)

// RevisionLister helps list Revisions.
// All objects returned here must be treated as read-only.
type RevisionLister interface {
	// List lists all Revisions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Revision, err error)
	// Revisions returns an object that can list and get Revisions.
	Revisions(namespace string) RevisionNamespaceLister
	RevisionListerExpansion
}

// revisionLister implements the RevisionLister interface.
type revisionLister struct {
	listers.ResourceIndexer[*v1.Revision]
}

// NewRevisionLister returns a new RevisionLister.
func NewRevisionLister(indexer cache.Indexer) RevisionLister {
	return &revisionLister{listers.New[*v1.Revision](indexer, v1.Resource("revision"))}
}

// Revisions returns an object that can list and get Revisions.
func (s *revisionLister) Revisions(namespace string) RevisionNamespaceLister {
	return revisionNamespaceLister{listers.NewNamespaced[*v1.Revision](s.ResourceIndexer, namespace)}
}

// RevisionNamespaceLister helps list and get Revisions.
// All objects returned here must be treated as read-only.
type RevisionNamespaceLister interface {
	// List lists all Revisions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Revision, err error)
	// Get retrieves the Revision from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Revision, error)
	RevisionNamespaceListerExpansion
}

// revisionNamespaceLister implements the RevisionNamespaceLister
// interface.
type revisionNamespaceLister struct {
	listers.ResourceIndexer[*v1.Revision]
}
