/*
Copyright 2020 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "knative.dev/serving/pkg/apis/serving/v1alpha1"
)

// DomainMappingLister helps list DomainMappings.
// All objects returned here must be treated as read-only.
type DomainMappingLister interface {
	// List lists all DomainMappings in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainMapping, err error)
	// DomainMappings returns an object that can list and get DomainMappings.
	DomainMappings(namespace string) DomainMappingNamespaceLister
	DomainMappingListerExpansion
}

// domainMappingLister implements the DomainMappingLister interface.
type domainMappingLister struct {
	indexer cache.Indexer
}

// NewDomainMappingLister returns a new DomainMappingLister.
func NewDomainMappingLister(indexer cache.Indexer) DomainMappingLister {
	return &domainMappingLister{indexer: indexer}
}

// List lists all DomainMappings in the indexer.
func (s *domainMappingLister) List(selector labels.Selector) (ret []*v1alpha1.DomainMapping, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainMapping))
	})
	return ret, err
}

// DomainMappings returns an object that can list and get DomainMappings.
func (s *domainMappingLister) DomainMappings(namespace string) DomainMappingNamespaceLister {
	return domainMappingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DomainMappingNamespaceLister helps list and get DomainMappings.
// All objects returned here must be treated as read-only.
type DomainMappingNamespaceLister interface {
	// List lists all DomainMappings in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DomainMapping, err error)
	// Get retrieves the DomainMapping from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DomainMapping, error)
	DomainMappingNamespaceListerExpansion
}

// domainMappingNamespaceLister implements the DomainMappingNamespaceLister
// interface.
type domainMappingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DomainMappings in the indexer for a given namespace.
func (s domainMappingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DomainMapping, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DomainMapping))
	})
	return ret, err
}

// Get retrieves the DomainMapping from the indexer for a given namespace and name.
func (s domainMappingNamespaceLister) Get(name string) (*v1alpha1.DomainMapping, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("domainmapping"), name)
	}
	return obj.(*v1alpha1.DomainMapping), nil
}
