load("@k8s_object//:defaults.bzl", "k8s_object")
load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")
load("@cluster_ca_bundle//:bundle.bzl", "CA_BUNDLE")
load("@//:istio.bzl", "disable_policy", "subst_ca_bundle")

package(default_visibility = ["//visibility:public"])

# Generate a istioclusterrolebinding.yaml based on the
# K8S_USER_OVERRIDE env variable.
genrule(
    name = "gen-istioclusterrolebinding",
    outs = ["istioclusterrolebinding.yaml"],
    cmd = """
K8S_USER_OVERRIDE=$$(grep STABLE_K8S_USER bazel-out/stable-status.txt | cut -d' ' -f 2)
if [ -z "$${K8S_USER_OVERRIDE}" ]; then
  echo "K8S_USER_OVERRIDE is empty or unset.  Please fix and run 'bazel clean' (see README.md)." >&2
  exit -1
fi

cat > $(location istioclusterrolebinding.yaml) <<EOF
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: istio-cluster-admin-binding
subjects:
  - kind: User
    name: $${K8S_USER_OVERRIDE}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
EOF
""",
    stamp = 1,
)

k8s_object(
    name = "istioclusterrolebinding",
    template = "istioclusterrolebinding.yaml",
)

k8s_object(
    name = "istio-core",
    template = "istio.yaml",
    visibility = ["//visibility:public"],
)

disable_policy(
    name = "istio-sidecar-injector-configmap-disabled",
    template = "istio-sidecar-injector-configmap-release.yaml",
)

k8s_object(
    name = "istio-sidecar-injector-configmap",
    template = ":istio-sidecar-injector-configmap-disabled",
)

sh_binary(
    name = "webhook-create-signed-cert",
    srcs = ["webhook-create-signed-cert.sh"],
    args = [
        "--service istio-sidecar-injector",
        "--namespace istio-system",
        "--secret sidecar-injector-certs",
    ],
)

subst_ca_bundle(
    name = "istio-sidecar-injector-with-ca-bundle",
    template = "istio-sidecar-injector.yaml",
    ca_bundle = CA_BUNDLE,
)

k8s_object(
    name = "istio-sidecar-injector",
    template = ":istio-sidecar-injector-with-ca-bundle",
)

k8s_objects(
    name = "istio",
    objects = [
        ":istioclusterrolebinding",
        ":istio-core",
        ":istio-sidecar-injector-configmap",
        ":istio-sidecar-injector",
    ],
)
